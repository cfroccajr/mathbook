<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of the documentation of MathBook XML   -->
<!--                                                          -->
<!--    MathBook XML Author's Guide                           -->
<!--                                                          -->
<!-- Copyright (C) 2013-2016  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="topics">
    <title>(*) Topics</title>

    <introduction>
        <p>Careful descriptions arranged into topics.  List here is a temporary outline.</p>
    </introduction>

    <section xml:id="topic-exercises">
        <title>(*) Exercises, Inline and Sectional</title>

    </section>

    <section xml:id="topic-verbatim-literal">
        <title>Verbatim and Literal Text</title>

        <introduction>

            <p>This section expands on parts of <xref ref="overview-verbatim-literal" />.  For descriptions of more involved uses, such as program listings and console sessions, see <xref ref="topic-program-listings" />.</p>

            <p>The tags described here contain <em>only raw characters</em>.  By that we typically mean the first 128 characters of the <acro>ASCII</acro> code.  Unicode characters are likely to migrate to HTML output just fine, but results for <latex /> output will be variable.  The restriction to character data has two consequences.  First, any markup will be silently ignored.  Second, you need to observe the rules on special characters and escaped characters for <init>XML</init>, which are mercifully simple.</p>

            <blockquote>
                <p>In your source, use <c>&amp;amp;</c> for an <ampersand />, and use <c>&amp;lt;</c> and <c>&amp;gt;</c> for <less /> and <greater />.  Otherwise, every other <acro>ASCII</acro> character will render faithfully across all possible formats.</p>
            </blockquote>
        </introduction>

        <subsection xml:id="short-verbatim-text">
            <title>Short, Inline, Verbatim Text</title>

            <p>The <tag>c</tag> is a mnemonic for <q>code</q>, but is really meant to be any chunk of literal characters that you want to emphasise that way.  It is meant for use within a sentence or caption (<q>inline</q>) so its use is limited to those situations, and others that are similar, such as a title or a cell of a table.  Typically these pieces of text do not break across lines, so can bleed into right margins, or cause very short lines.  So keep the content short, and/or use early in the first sentence of a paragraph where you know it will not affect a line break.  For longer chunks, see options following.</p>

            <p>Typical presentation is a monospace font, perhaps of a slightly heavier weight.</p>

            <p>There is two caveats for use when creating <latex /> output.  We have chosen to use the <c>?</c> character as a delimiter for the start and end of a run of verbatim text.  Unfortunately, such a choice is necessary.  But if your run of characters includes a question mark, then the run will end prematurely.  So we have an attribute, <attribute>latexsep</attribute> that can be set to some other character, such as <c>!</c> or <c>|</c>, that does not appear in your content.  This choice has no effect on other output formats.</p>

            <p>The other caveat for <latex /> output is that you may use the <tag>c</tag> tag within a <tag>title</tag>, but you should avoid <latex />'s special characters (such as <c>\</c>, <c>#</c>, etc.).  Regular characters should migrate to titles as verbatim text just fine, but we do not guarantee all possibilities.</p>
        </subsection>

        <subsection xml:id="long-verbatim-text">
            <title>Longer, Inline, Verbatim Text</title>

            <p>For longer pieces of verbatim text, use the <tag>cd</tag> tag, which is short for <q>code display</q>, analogous to the <tag>md</tag> for mathematics.  It is used within sentences of a paragraph and will be presented with a vertical break above and below, but without interrupting the paragraph.  Because of the display presentation, it cannot be used other places, such as a <tag>title</tag>, where a vertical gap is not appropriate.  All of the previous discussion about special characters applies for this tag.</p>

            <p>You have two options in use.  You may author inline with the rest of a sentence, with no extra newlines or whitespace before, after, or within the content.  The result will be a single displayed line.</p>

            <p>Or you may structure the content using one, or more, of the <tag>cline</tag> tag, which is meant to be similar to the <tag>line</tag> tag used elsewhere.  You should still take care to not place any extra whitespace before or after the <tag>cd</tag> element, but inbetween the <tag>cline</tag> you may use as much visual formatting of your source as you wish, especially if you like your source to mirror your output.  For <latex /> output there is less danger that your content will inadvertenly end the verbatim text prematurely.</p>
        </subsection>

        <subsection xml:id="block-verbatim-text">
            <title>Blocks of Verbatim Text</title>

            <p>If you want to isolate large chunks of verbatim text outside of paragraphs, the <tag>pre</tag> tag is the one to use.  It can be used as a peer of paragraphs (and other structures) as a child of a subdivision, or it can be placed into a <tag>listing</tag> to receive a caption, title and number.</p>

            <p>You can structure the contents with <tag>cline</tag> in exactly the same manner as for <tag>cd</tag>.  But you may find this tedious.  Instead, you can make the content of <tag>pre</tag> a sequence of lines separated by newlines.  So that you can preserve the indentation of your source, the line closest to the left margin is taken to actually be the left margin, and a corresponding amount of leading whitespace will be removed from every line.  This will work well if you recognize two caveats.  First, results will be unpredictable if you mix spaces and tabs for indentation.  Sticking with spaces is best.  Second, if your first characters of content immediately follow the <tag>pre</tag> tag then there is no leading whitespace and it is as if that line is already at the left margin.  Then subsequent indentation may seem too severe to you.</p>

            <p>As previously mentioned, <xref ref="topic-program-listings" /> discusses the <tag>console</tag> and <tag>program</tag> tags which are more specific, and hence more capable.  Review the possibilities before you decide between <tag>pre</tag>, <tag>console</tag>, and <tag>program</tag>.</p>
        </subsection>
    </section>

    <section xml:id="topic-references">
        <title>(*) References and Citations</title>

    </section>

    <section xml:id="topic-cross-referencing">
        <title>(*) Cross-Referencing Information</title>

    </section>

    <section xml:id="topic-mathematics">
        <title>(*) Mathematics</title>

        <p>This section is incomplete, newer features are being discussed as they are introduced.</p>

        <paragraphs>
            <title>Punctuation After Display Math</title>

            <p>If a chunk of displayed math concludes a sentence, then the sentence-ending punctuation should appear at the conclusion of the display.  (And certainly not at the start of the first line after the display!)  But do not author the punctuation within the mathematics element, put it afterwards, where it logically belongs.</p>

            <p>More specifically, place a sentence-ending period (say) <em>immediately</em> after the closing of an <tag>me</tag>, <tag>men</tag>, <tag>md</tag>, or <tag>mdn</tag> element. MathBook XML will place the period in your output in the right place and in the right way.  (By using <latex />'s <c>\text{}</c> macro, if you are curious to know the details.)  Here is an example.  The <init>XML</init> source<cd>
                <cline>&lt;md&gt;</cline>
                <cline>    &lt;mrow&gt;(a+b)^2&lt;/mrow&gt;</cline>
                <cline>&lt;/md&gt;.  Now...</cline>
            </cd>will render as<md>
                <mrow>(a+b)^2</mrow>
            </md>.  Now<ellipsis /></p>

            <p>Take notice of the requirement that the punctuation must be <em>immediately</em> after the closing tag of the math element, otherwise it will not migrate properly.</p>
        </paragraphs>

    </section>

    <section xml:id="topic-lists-and-labels">
        <title>(*) Lists and their Labels</title>

    </section>

    <section xml:id="topic-exercises-solutions">
        <title>(*) Exercises and their Answers</title>

    </section>

    <section xml:id="topic-images">
        <title>Images</title>

        <subsection xml:id="topic-images-raster">
            <title>Raster Images</title>

            <p>A <term>raster image</term> is an image described pixel-by-pixel, with different colors and intensities.  Photographs are good examples.  Common formats are Portable Network Graphics (PNG) and Joint Photographic Experts Group (JPEG, JPG), which will both work with <c>pdflatex</c> and modern browsers.  JPEG are a good choice for photographics since they are compressed on the assumption they will be viewed by a human, while PNG is a lossless format and good for line art, diagrams and similar images (if you do not have vector graphics versions, see below).</p>

            <p>To use these images, you simply provide the filename, with a relative path.  A subdirectory such as <c>images</c> is a good choice for a place to put them.  It is your responsibility to place these images where the <latex /> output will find them or where the HTML output will find them.  The XML would look like:</p>

            <pre>
            <![CDATA[<image source="images/crocodiles.png" width="50%" />]]>
            </pre>

            <p>Typically you would wrap this in a <tag>figure</tag> that might have an <attribute>xml:id</attribute> attribute for cross-references, with or without a caption.  There is no <attribute>height</attribute> attribute, so the aspect ratio of your image is your responsibility outside of MathBook XML.  The <attribute>width</attribute> attribute is a percentage of the available width of the text (outside of a <tag>sidebyside</tag> panel).  Default width is typically 90<percent />.</p>

            <p>You may also provide a <tag>description</tag> which will aid accessibility for electronic formats.  Keep such readers in mind and provide as much description as possible.  Keep the markup simple, since this will typically migrate to an HTML attribute that cannot contain any structure.  Be careful to avoid double-quotes.  For example,</p>

            <pre>
            <![CDATA[
            <image source="images/crocodiles.jpeg" width="50%">
                <description>Five crocodiles partially submerged in the shallows.</description>
            </image>
            ]]>
            </pre>
        </subsection>

        <subsection xml:id="topic-images-vector">
            <title>Vector Graphics</title>

            <p>An image is a <term>vector graphic</term> if the file describes the geometric shapes that constitute the image.  So a simple diagram would be a good candidate, but a photograph would not.  Popular formats are Portable Document Format (PDF) and Scalable Vector Graphics (SVG).  You will get the best results with PDF images in <latex /> output and SVG images for HTML.  The principal advantage of these formats is that they scale (big or small) smoothly, along with fonts.  This is critical when you cannot predict the screen size for a reader of an electronic version.</p>

            <p>Unless you describe these images with a language (see next subsection), you are responsible for providing the PDF and SVG versions.  The <c>pdf2svg</c> utility is very useful if you have PDF images only.  To use these images, you simply follow the instructions above, but do not include a file extension.  This alerts the conversion to use the best possible choice.  So presuming we had files <c>images/toad-life-cycle.pdf</c> and <c>images/toad-life-cycle.svg</c>, an example would be:</p>

            <pre>
            <![CDATA[
            <image source="images/toad-life-cycle" width="85%">
                <description>Diagram of the four stages of a toad's life.</description>
            </image>
            ]]>
            </pre>
        </subsection>

        <subsection xml:id="topic-images-source">
            <title>(*) Images Described by Source Code</title>

            <p>To be written once elements and tags solidfy, see sample article for examples.</p>
        </subsection>

    </section>

    <section xml:id="topic-tabular">
        <title>(*) Tables and Tabulars</title>

    </section>

    <section xml:id="topic-program-listings">
        <title>(*) Program Listings</title>

    </section>

    <section xml:id="topic-sidebyside">
        <title>(*) Side-by-Side Panels</title>

    </section>

    <section xml:id="topic-front-back-matter">
        <title>(*) Front and Back Matter</title>

    </section>

    <section xml:id="topic-automatic-lists">
        <title>(*) Automatic Lists</title>

    </section>

    <section xml:id="topic-url">
        <title><init>URL</init>s and External References</title>

        <subsection>
            <title><init>URL</init>s to External Web Pages</title>

            <p>The <tag>url</tag> tag can be used to point to external items (as distinct from other portions of your current document, which is accomplished with the <tag>xref</tag> element, <xref ref="overview-cross-references" />).  It always needs a value for the <attribute>href</attribute> attribute, most likely a <init>URL</init>.  Most of this time, this will point to some resource available on the Internet but it could be a file on the system hosting your document, perhaps using a relative address (but see the rest of this section for some cautions).  Here are three scenarios:<ul>
                <li><p>The <tag>url</tag> element is empty.  Then the value of the <attribute>href</attribute> is also used for the visible text of the link, verbatim, and usually in a monospace font.  Use <term>percent-encoding</term> (aka <term>URL encoding</term>) for the <attribute>href</attribute> attribute to include special characters, such as spaces.</p></li>

                <li><p>The <tag>url</tag> element has content.  Now the content should be authored as you would any other text in a sentence.  Potentially problematic characters, such as a tilde should be authored with provided empty elements, but authored literally in the <attribute>href</attribute> attribute.</p></li>

                <li><p>The <tag>url</tag> element has content, but you want this content to look like a <init>URL</init>.  Use the <tag>c</tag> element around the content, and follow the rules for verbatim text.  I do this often for simple <init>URL</init>s that point to the top level of a website.  The <attribute>href</attribute> is a complete <init>URL</init> like <c>http://mathbook.pugetsound.edu/</c> but for content I use a less-imposing reader-friendly version like <c>mathbook.pugetsound.edu</c>.</p></li>
            </ul></p>

            <p>For <latex /> output it gets quite tricky to handle all the various meanings of certain escape characters in <init>URL</init>s in more complicated contexts (such as tables, footnotes, and titles), so there may be some special cases where the formatting is off or you get an error when compiling your <latex />.  We handle most of these situations, but we always appreciate reports of missed cases.</p>
        </subsection>

        <subsection xml:id="topic-external-data-file">
            <title><init>URL</init>s to External Data Files</title>

            <p>The <tag>url</tag> element can be used to make data files available to your reader.  Consider the example of a spreadsheet containing a large data set that a reader needs to analyze as part of an exercise.  Here are our recommendations on how to accomplish this:<ul>
                <li><p>If the file is hosted on some server unassociated with your project, and does not have a license compatible with your project, then just set the <attribute>href</attribute> to the complete address.  Be sure to include enough of the address for the reader of a a print version to be able to type in the <init>URL</init>, either as the content of the <tag>url</tag> or in close vicinity.</p></li>

                <li><p>If you authored the spreadsheet, or you are allowed to legally copy and distribute it, then place it on your server where you host your book project.  Then do as above and use the full <init>URL</init> for the <attribute>href</attribute> attribute, with a visible version available for <init>PDF</init> and print versions.</p></li>

                <li><p>If you have control over the placement of the file, you can host it on your server, and use a <init>URL</init> relative to the location of your <init>HTML</init>, <init>PDF</init>, or other files that comprise your document.  This might be a good choice if your book will be posted many places and you can give it to others as an archive, like a <c>*.zip</c> file.  It is a bad idea if a reader downloads a PDF without the data file following along and remaining in the same relative location.  It is an impossible idea if your document gets printed on paper and there is no idea what a relative <init>URL</init> means and there is not even a link to click on.</p></li>
            </ul></p>

            <p>Consider your audience and think about how much guidance they need about using context menus or helper/viewer applications to make use of the file formats you are providing. This advice may be different depending on the type of files and the types of output for your document.</p>
        </subsection>
    </section>

    <section xml:id="topic-units-measure">
        <title>(*) Units of Measure</title>

    </section>

    <section xml:id="topic-unicode">
        <title>Unicode Characters</title>

        <introduction>

            <p>MathBook XML supports (and encourages) the use of Unicode characters.  Here are some relevant comments.<ul>
                <li><p>Unicode characters will migrate well to any output format based on <init>HTML</init>.  Most browsers will have a variety of fonts with glyphs to realize these characters.</p></li>

                <li><p><latex /> will not always behave as smoothly.  For openers, you definitely will want to use the <c>xelatex</c> engine to build a <init>PDF</init>.  Then you need to be sure your system has a font with the necessary characters and you make the font known to <c>xelatex</c>.  We are working out the details of the best way to accomplish this.</p></li>

                <li><p>How do you get a Unicode character into your source?  In part this is specific to your operating system and editor, so is outside the scope of this guide, but we have hints below for popular operating systems.</p></li>

                <li><p>You can always place a Unicode character in your source using <init>XML</init> syntax.  The first thing an <init>XML</init> parser will do is convert this syntax into a character.  The number of the <c>SECTION SIGN</c> in hexadecimal is <c>A7</c>, so the syntax <c>&amp;#xA7;</c> is identical to the  character &#xA7;.  Of course, this will get tedious fast.</p></li>

                <li><p>The <url href="https://www.cs.tut.fi/~jkorpela/fui.html8">Full Unicode Input</url> utility at <c>www.cs.tut.fi/~jkorpela/fui.html8</c> will allow you to specify a chunk of 256 consecutive Unicode numbers and then you can click on characters to make a string of several or many.  You can cut/paste these into your source, or convert the whole lot to <init>XML</init> syntax all at once.</p></li>

                <li><p>Unicode characters have standardized names.  You can find these, and more information, including font support, at the Unicode section of <url href="http://www.fileformat.info/info/unicode/">FileFormat.info</url>, <c>www.fileformat.info/info/unicode/</c>.  If you are struggling to find a specific character, then using this site's name in a search will often quickly locate what you need.  Be sure to experiment with the test pages there for browser and font support (including checking your local configuration).</p></li>

                <li>
                    <p><alert>Warning</alert>: do not use Unicode characters as a way to get mathematical symbols (that is delegated to our use of <latex /> syntax).  And do not use Unicode when we have provided an empty element for a character, especially when that character may be used in a markup syntax for some output, such as <latex />, <init>HTML</init>, <init>JSON</init>, Markdown, <ellipsis /></p>

                    <p>For example, if you put many naked hash symbols (<hash />) in your source, then you will get nice <init>HTML</init>, but when you try to get print from a PDF from <latex /> you will have a train wreck on your hands when you compile the <latex />.  Instead, be sure to always use the provided <c>&lt;hash /&gt;</c> element.  <em>Always</em>.  Other empty elements are conveniences, which spare you from looking up Unicode numbers and make your source more readable, rather than a necessity to avoid special characters.  An example is <c>&lt;times /&gt;</c>, for use outside of a strictly mathematical setting:  <q>I bought a 2<times />4 at the lumberyard.</q></p>
                </li>
            </ul></p>
        </introduction>

        <subsection>
            <title>Unicode Support in OSX</title>

            <p>Mitch Keller reports on 2017-01-12 a way to get some popular characters with OSX.  Use the Keyboard preference pane under System Preferences. In there, you can enable <cd>
                <cline>Show Keyboard, Emoji, &amp; Symbols Viewers in menu bar</cline>
            </cd>Once you activate the keyboard viewer, you get a keyboard on your screen. When you hold down <c>opt</c>, it shows you what other symbol you would get if you push <c>opt+letter</c>. For instance, <c>opt+w</c> gives an upper-case Greek sigma and <c>opt+=</c> gives a not-equals sign (neither of which we can handle when processing the latex version of this guide). To get ä, you type <c>opt+u</c> and then hit <c>a</c>. This is illustrated by the keys for diacritical marks being highlighted in orange while holding opt.  The shift key can have an effect to produce variations of some characters, such as quote marks (dumb versus smart).</p>
        </subsection>

        <subsection>
            <title>(*) Unicode Support in Linux</title>

            <p></p>
        </subsection>

        <subsection>
            <title>(*) Unicode Support in Windows</title>

            <p></p>
        </subsection>
    </section>

    <section xml:id="topic-doctest-sage">
        <title>(*) Testing Sage Examples</title>

    </section>

    <section xml:id="topic-build-in-smc">
        <title>Building Output in SageMathCloud</title>

        <p>SageMathCloud has <em>all</em> the tools you need to author with MathBook XML.  You will need an upgrade from a subscription to allow Internet connectivity, but at a minimum a colleague with a paid plan can spare you one, they are plentiful and meant to be shared.</p>

        <ul>
            <li><p>Text editor: reasonably good, partially XML syntax-aware.</p></li>
            <li><p><c>git</c>: installed (so clone MathBook XML).</p></li>
            <li><p><latex />: installed with many additional packages.</p></li>
            <li><p>Python: installed, necessary for <c>mbx</c> script.</p></li>
            <li><p>PDF viewer: handed off to your browser.</p></li>
            <li><p>HTML viewer: convert to the <q>raw</q> URL and you can preview.</p></li>
            <li><p>HTML server: nope.  Zip up output and host elsewhere.</p></li>
        </ul>
    </section>


    <!--
    <section xml:id="topic-">
        <title></title>

    </section>

   -->

</chapter>
